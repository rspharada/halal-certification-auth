AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.13

  SAM Template for Halmark 認証基盤（Python 3.13 / コンテナイメージ）

# API Gateway 全体に適用される CORS 設定
Globals:
  Api:
    Cors:
      AllowOrigin: !Sub "'${CorsAllowedOrigin}'"
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,Cookie'"
      AllowCredentials: true

# デプロイ時に渡す各種環境変数の定義
Parameters:
  Environment:
    Type: String
    Default: local
    AllowedValues:
      - local
      - dev
      - stg
      - prd
    Description: Deployment environment
  Domain:
    Type: String
    Default: App Domain
  ReduirectPath:
    Type: String
    Description: Redirect URI
  CorsAllowedOrigin:
    Type: String
    Default: halal.local
    Description: Allowed origin for CORS
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID
  CognitoAppClientId:
    Type: String
    Description: Cognito App Client ID
  CognitoAppClientSecret:
    Type: String
    Description: Cognito App Client Secret

# 以下の Resources セクションで、各種 Lambda 関数と IAM ロールなどを定義します。
# - SignupFunction: サインアップ（ユーザー登録）処理
# - SignupConfirmFunction: 確認コードを用いた仮登録 → 本登録確定
# - ResendCodeFunction: 確認コードの再送
# - SigninFunction: パスワード認証によるサインイン処理
# - MfaVerifyFunction: サインイン後のMFAコード検証とトークン発行
# - ForgotPasswordFunction: パスワードリセット申請（コード送信）
# - ForgotPasswordConfirmFunction: パスワード再設定（コードと新パスワード）

# IAM ロール定義
# Lambda関数が CloudWatch Logs および Cognito 操作用に使用
# 各関数は Docker イメージで構成されており、アーキテクチャは x86_64

# 各 Lambda 関数定義はこのあとに続きます
# コメントや Description は必要に応じて個別関数へも追加可能です
Resources:
  # LambdaExecutionRoleは、Lambda関数が使用するIAMロールを定義します
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "halmark-${Environment}-lambda-role"  # ロール名を環境ごとに設定
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com  # Lambdaサービスがこのロールを引き受けることを許可
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:ConfirmSignUp
                  - cognito-idp:ResendConfirmationCode
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminSetUserPassword
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  # SignupFunctionは、signup（ユーザー登録）処理を行うAWS Lambda関数を定義します
  SignupFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-signup" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] Signup 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        Signup:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/signup
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/signup
      DockerTag: python3.13-v1

  # SignupFunctionConfirmは、signup（ユーザー登録）確認処理を行うAWS Lambda関数を定義します
  SignupConfirmFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-confirm-signup" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] Confirm Signup 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        SignupConfirm:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/signup/confirm
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/signup_confirm
      DockerTag: python3.13-v1

  # ResendCodeFunctionは、signup（ユーザー登録）確認コードを再送するAWS Lambda関数を定義します
  ResendCodeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-resend-code" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] Resend Code 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        SignupConfirm:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/resend-code
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/resend_code
      DockerTag: python3.13-v1

  # SigninFunctionは、signin（ユーザー認証）処理を行うAWS Lambda関数を定義します
  SigninFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-signin" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] Signin 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        Signin:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/signin
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/signin
      DockerTag: python3.13-v1

  # MfaVerifyFunctionは、MFA（多要素認証）検証を行うAWS Lambda関数を定義します
  MfaVerifyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-mfaverify" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] MFA Verify 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        Signin:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/mfa
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          DOMAIN: !Ref Domain
          REDIRECT_PATH: !Ref ReduirectPath
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/mfa_verify
      DockerTag: python3.13-v1

  # ForgotPasswordFunctionは、パスワード再設定コード送信を行うAWS Lambda関数を定義します
  ForgotPasswordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-forgot-password" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] Forgot Password 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        Signin:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/forgot-password
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/forgot_password
      DockerTag: python3.13-v1

  # ForgotPasswordConfirmFunctionは、パスワード再設定コードによる変更確定を行うAWS Lambda関数を定義します
  ForgotPasswordConfirmFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "halmark-${Environment}-confirm-forgot-password" # Lambda関数名を環境ごとに設定
      Description: !Sub "[halmark][${Environment}] Confirm Forgot Password 関数"
      PackageType: Image
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn  # 実行ロールを設定
      Events:
        Signin:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/forgot-password/confirm
            Method: post
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_APP_CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_APP_CLIENT_SECRET: !Ref CognitoAppClientSecret
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app/forgot_password_confirm
      DockerTag: python3.13-v1

Outputs:
  # API Gateway の各認証エンドポイントURLを出力
  SignupApi:
    Description: 新規ユーザー登録（サインアップ）用の API Gateway エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/signup"

  SignupConfirmApi:
    Description: サインアップ確認コードを検証する API エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/signup/confirm"

  ResendCodeApi:
    Description: サインアップ確認コードを再送する API エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/resend-code"

  SigninApi:
    Description: ユーザーのサインイン（ログイン）用 API エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/signin"

  MfaVerifyApi:
    Description: MFA（多要素認証）の検証用 API エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/mfa"

  ForgotPasswordApi:
    Description: パスワード再設定コード送信（忘れた場合）の API エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/forgot-password"

  ForgotPasswordConfirmApi:
    Description: パスワード再設定コードによる変更確定の API エンドポイント
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/auth/forgot-password/confirm"

  # 各 Lambda 関数の ARN を出力（参照用）
  SignupFunction:
    Description: サインアップ処理を実行する Lambda 関数の ARN
    Value: !GetAtt SignupFunction.Arn

  SignupConfirmFunction:
    Description: サインアップの確認処理を行う Lambda 関数の ARN
    Value: !GetAtt SignupConfirmFunction.Arn

  ResendCodeFunction:
    Description: 確認コードの再送処理を行う Lambda 関数の ARN
    Value: !GetAtt ResendCodeFunction.Arn

  SigninFunction:
    Description: サインイン処理を実行する Lambda 関数の ARN
    Value: !GetAtt SigninFunction.Arn

  MfaVerifyFunction:
    Description: MFAコード検証を行う Lambda 関数の ARN
    Value: !GetAtt MfaVerifyFunction.Arn

  ForgotPasswordFunction:
    Description: パスワード再設定コード送信を行う Lambda 関数の ARN
    Value: !GetAtt ForgotPasswordFunction.Arn

  ForgotPasswordConfirmFunction:
    Description: パスワード再設定完了処理を行う Lambda 関数の ARN
    Value: !GetAtt ForgotPasswordConfirmFunction.Arn